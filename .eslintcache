[{"E:\\Project\\networksecurity\\cypherit\\src\\index.js":"1","E:\\Project\\networksecurity\\cypherit\\src\\reportWebVitals.js":"2","E:\\Project\\networksecurity\\cypherit\\src\\components\\Graph.js":"3","E:\\Project\\networksecurity\\cypherit\\src\\components\\PA0.js":"4","E:\\Project\\networksecurity\\cypherit\\src\\components\\Pa0.js":"5","E:\\Project\\networksecurity\\cypherit\\src\\components\\Navbar.js":"6","E:\\Project\\networksecurity\\cypherit\\src\\components\\Graphapp.js":"7","E:\\Project\\networksecurity\\cypherit\\src\\components\\KeyGenerator.js":"8","E:\\Project\\networksecurity\\cypherit\\src\\components\\ImageEncrypt.js":"9","E:\\Project\\networksecurity\\cypherit\\src\\components\\ImageOp.js":"10","E:\\Project\\networksecurity\\cypherit\\src\\components\\Pa1.js":"11","E:\\Project\\networksecurity\\cypherit\\src\\components\\GraphAppAvalanche.js":"12","E:\\Project\\networksecurity\\cypherit\\src\\components\\Home.js":"13"},{"size":1083,"mtime":1618840003723,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":1473,"mtime":1615910068542,"results":"17","hashOfConfig":"15"},{"size":2706,"mtime":1615904157776,"results":"18","hashOfConfig":"15"},{"size":2993,"mtime":1618829953018,"results":"19","hashOfConfig":"15"},{"size":6843,"mtime":1619110437399,"results":"20","hashOfConfig":"15"},{"size":755,"mtime":1618840697412,"results":"21","hashOfConfig":"15"},{"size":2819,"mtime":1618779695299,"results":"22","hashOfConfig":"15"},{"size":3682,"mtime":1618779698662,"results":"23","hashOfConfig":"15"},{"size":8338,"mtime":1618779692881,"results":"24","hashOfConfig":"15"},{"size":13366,"mtime":1619157555007,"results":"25","hashOfConfig":"15"},{"size":1233,"mtime":1619110800740,"results":"26","hashOfConfig":"15"},{"size":513,"mtime":1618839153920,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"eutxkm",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Project\\networksecurity\\cypherit\\src\\index.js",[],"E:\\Project\\networksecurity\\cypherit\\src\\reportWebVitals.js",[],"E:\\Project\\networksecurity\\cypherit\\src\\components\\Graph.js",[],["58","59"],"E:\\Project\\networksecurity\\cypherit\\src\\components\\PA0.js",["60","61","62"],"import React from 'react'\r\nimport App from './App.js'\r\nimport Graph from './Graph.js'\r\n\r\n\r\n// var shift = 25\r\nclass PA0 extends React.Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      cipher: \"\",\r\n      graphdata : \"\",\r\n      alpha : \"\",\r\n      plainText : \"\",\r\n      shift : 0,\r\n      lastwritten : 0\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleChangedCipher = this.handleChangedCipher.bind(this)\r\n    this.handleShift = this.handleShift.bind(this);\r\n    this.getPlainText = this.getPlainText.bind(this);\r\n    this.getCipherText = this.getCipherText.bind(this);\r\n  }\r\n\r\n  handleChange(event){\r\n    this.setState({\r\n      plainText : event.target.value,\r\n      lastwritten : 0\r\n    },()=>{this.getCipherText()})\r\n  }\r\n\r\n  handleShift(event)\r\n  {\r\n    this.setState({\r\n      shift : event.target.value\r\n    },()=>{\r\n      if(!this.state.lastwritten)\r\n        this.getCipherText();\r\n      else\r\n        this.getPlainText();\r\n    })\r\n\r\n  }\r\n\r\n  handleChangedCipher(event){\r\n    this.setState({\r\n      cipher : event.target.value,\r\n      lastwritten : 1\r\n    },()=>{this.getPlainText()})\r\n\r\n\r\n  }\r\n\r\n  getCipherText(){\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            plainText:this.state.plainText,\r\n            'shift':this.state.shift\r\n        })\r\n    };\r\n    fetch(\"http://127.0.0.1:8000/pa0\",requestOptions).then(response=>response.json()).then(data =>{\r\n      this.setState({\r\n        cipher : data.cipher,\r\n        graphdata : data.graphdata,\r\n      })\r\n    })\r\n  }\r\n\r\n  getPlainText()\r\n  {\r\n      const requestOptions = {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({\r\n              plainText:this.state.cipher,\r\n              'shift':24 - this.state.shift\r\n          })\r\n      };\r\n      fetch(\"http://127.0.0.1:8000/pa0\",requestOptions).then(response=>response.json()).then(data =>{\r\n        this.setState({\r\n          plainText : data.cipher\r\n        })\r\n      })\r\n  }\r\n\r\n  componentDidMount(){\r\n  }\r\n  render () {\r\n    return (\r\n      <div>\r\n        <form>\r\n        <input value = {this.state.plainText} type = \"text\" placeholder = \"Plain Text\" onChange={this.handleChange}/>\r\n        <input value = {this.state.shift} type = \"text\" placeholder = \"Shift\" onChange={this.handleShift}/>\r\n        <input value = {this.state.cipher} type = \"text\" placeholder = \"Cipher Text\" onChange={this.handleChangedCipher}/>\r\n        <h1>{this.state.cipher}</h1>\r\n        </form>\r\n        <App data = {this.state.graphdata}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CaesarCypher\r\n",["63","64"],"E:\\Project\\networksecurity\\cypherit\\src\\components\\Pa0.js",[],"E:\\Project\\networksecurity\\cypherit\\src\\components\\Navbar.js",["65","66","67","68","69"],"E:\\Project\\networksecurity\\cypherit\\src\\components\\Graphapp.js",["70"],"E:\\Project\\networksecurity\\cypherit\\src\\components\\KeyGenerator.js",[],"E:\\Project\\networksecurity\\cypherit\\src\\components\\ImageEncrypt.js",["71"],"E:\\Project\\networksecurity\\cypherit\\src\\components\\ImageOp.js",["72","73"],"E:\\Project\\networksecurity\\cypherit\\src\\components\\Pa1.js",["74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89"],"import React from 'react'\r\nimport GraphAppAvalanche from './GraphAppAvalanche.js'\r\n\r\n\r\nconst roundlist = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\r\nclass Pa1 extends React.Component {\r\n  constructor(){\r\n    super()\r\n    this.state = {\r\n      cipher: \"\",\r\n      graphdata : \"\",\r\n      plainText : \"\",\r\n      rounds : 1,\r\n      blockSize : 16,\r\n      key : \"\",\r\n      mode : 1,\r\n      seed : 0,\r\n      m1 : \"Plain\",\r\n      m2 : \"Cipher\",\r\n      padding : 1,\r\n      plainTextType : \"ASCII\",\r\n      cipherTextType : \"HEX\"\r\n\r\n    }\r\n    this.handleDataApi = this.handleDataApi.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleRound = this.handleRound.bind(this)\r\n    this.handleBlockSize = this.handleBlockSize.bind(this)\r\n    this.handleKey = this.handleKey.bind(this)\r\n    this.handleSeed = this.handleSeed.bind(this)\r\n    this.changeMode = this.changeMode.bind(this)\r\n    this.handleGraph = this.handleGraph.bind(this)\r\n    this.handlePadding = this.handlePadding.bind(this)\r\n    this.isValid = this.isValid.bind(this)\r\n    this.handlePlainTextType = this.handlePlainTextType.bind(this)\r\n    this.handleCipherTextType = this.handleCipherTextType.bind(this)\r\n  }\r\n\r\n  isValid()\r\n  {\r\n    if((this.state.blockSize != 16 && this.state.blockSize !=32 && this.state.blockSize !=64) )\r\n    {\r\n      // alert(\"Block Size should be in [16,32,64]\")\r\n      return 0\r\n    }\r\n    if(this.state.rounds<1 || this.state.rounds>16)\r\n    {\r\n      // alert(\"Rounds should be between 1 and 16\")\r\n      return 0\r\n    }\r\n\r\n    if(this.state.key.length < this.state.blockSize/8)\r\n    {\r\n      if(this.state.mode==1)\r\n      {\r\n        this.setState({\r\n          cipher : \"Error : Key Length must be of length \" + this.state.blockSize/8\r\n        })\r\n      }\r\n      else{\r\n        this.setState({\r\n          plainText : \"Error : Key Length must be of length \" + this.state.blockSize/8\r\n        })\r\n      }\r\n      return 0\r\n    }\r\n\r\n\r\n    if(this.state.plainText.length==0 && this.state.mode == 1)\r\n    {\r\n      this.setState({\r\n        cipher : \"\"\r\n      })\r\n      return 0;\r\n    }\r\n    if(this.state.cipher.length==0 && this.state.mode == 0 )\r\n    {\r\n      this.setState({\r\n        plainText : \"\"\r\n      })\r\n      return 0\r\n    }\r\n    var tmp = this.state.blockSize/8\r\n    if(this.state.mode==1 && this.state.plainText.length%tmp !=0 && this.state.padding==0)\r\n    {\r\n      this.setState({\r\n        cipher : \"Either make the text length a multiple of \"+tmp +\" or enable the padding \"\r\n      })\r\n      return 0;\r\n      // alert(\"Either make the text length a multiple of \"+tmp +\" or enable the padding \")\r\n    }\r\n    return 1\r\n  }\r\n\r\n  handleUpdate()\r\n  {\r\n    if(!this.isValid())\r\n      return\r\n    if(this.state.mode == 1)\r\n    {\r\n      this.handleDataApi(this.state.plainText)\r\n    }\r\n    else {\r\n      this.handleDataApi(this.state.cipher)\r\n    }\r\n  }\r\n  handlePadding(event){\r\n    this.setState({\r\n      padding : (this.state.padding+1)%2\r\n    },() => this.handleUpdate())\r\n  }\r\n  changeMode(event){\r\n    this.setState({\r\n      mode : (this.state.mode+1)%2,\r\n      m1 : this.state.m1 == \"Plain\" ? \"Cipher\" : \"Plain\",\r\n      m2 : this.state.m2 == \"Plain\" ? \"Cipher\" : \"Plain\",\r\n      plainText : \"\",\r\n      cipher : \"\"\r\n    })\r\n  }\r\n  handleSeed(event){\r\n    this.setState({\r\n      seed : event.target.value\r\n    },()=>{\r\n      this.handleUpdate();\r\n\r\n    })\r\n  }\r\n\r\n  handleKey(event){\r\n    this.setState({\r\n      key : event.target.value\r\n    },()=>{\r\n      this.handleUpdate();\r\n\r\n    })\r\n  }\r\n  handleRound(event){\r\n    this.setState({\r\n      rounds : event.target.value\r\n    },()=>{\r\n      this.handleUpdate();\r\n\r\n    })\r\n  }\r\n  handleBlockSize(event){\r\n    this.setState({\r\n      blockSize : event.target.value\r\n    },()=>{\r\n      this.handleUpdate();\r\n\r\n    })\r\n  }\r\n  handlePlainTextType(event){\r\n    this.setState({\r\n      plainTextType : event.target.value\r\n    },()=>{\r\n      this.handleUpdate();\r\n    })\r\n  }\r\n  handleCipherTextType(event){\r\n    this.setState({\r\n      cipherTextType : event.target.value\r\n    },()=>{\r\n      this.handleUpdate();\r\n    })\r\n  }\r\n  handleDataApi(tmptxt){\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            txt:tmptxt,\r\n            rounds : this.state.rounds,\r\n            key : this.state.key,\r\n            blockSize : this.state.blockSize,\r\n            mode : this.state.mode,\r\n            seed : this.state.seed,\r\n            padding : this.state.padding,\r\n            plainTextType : this.state.plainTextType,\r\n            cipherTextType : this.state.cipherTextType\r\n\r\n        })\r\n    };\r\n    fetch(\"http://127.0.0.1:8000/des\",requestOptions).then(response=>response.json()).then(data =>{\r\n      if(this.state.mode){\r\n        this.setState({\r\n          cipher : data.txt\r\n        })\r\n      }\r\n      else{\r\n        this.setState({\r\n          plainText : data.txt\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  handleGraph(){\r\n    if(this.state.mode == 0 )\r\n    {\r\n      alert(\"Press Swap.\")\r\n      return 0\r\n    }\r\n    if(this.state.plainText.length == 0)\r\n    {\r\n      alert(\"Enter a plain-text.\")\r\n      return 0\r\n    }\r\n    if(this.state.key.length < 8)\r\n    {\r\n      alert(\"For Avalanche effect please enter a key of atleast 8 characters.\")\r\n      return\r\n    }\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            // txt: this.state.mode ? this.state.plainText : this.state.cipher,\r\n            txt :this.state.plainText,\r\n            rounds : this.state.rounds,\r\n            key : this.state.key,\r\n            blockSize : this.state.blockSize,\r\n            mode : this.state.mode,\r\n            seed : this.state.seed,\r\n            padding : this.state.padding\r\n\r\n        })\r\n    };\r\n    fetch(\"http://127.0.0.1:8000/des-avalanche\",requestOptions).then(response=>response.json()).then(data =>{\r\n      this.setState({\r\n        graphdata : data.graphdata\r\n      })\r\n    })\r\n\r\n  }\r\n  handleChange(event){\r\n    if(this.state.mode){\r\n      this.setState({\r\n        plainText : event.target.value\r\n      },()=>{\r\n        this.handleUpdate();\r\n      })\r\n    }\r\n    else {\r\n      this.setState({\r\n        cipher : event.target.value\r\n      },()=>{\r\n        this.handleUpdate();\r\n\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n  }\r\n  render () {\r\n\r\n    return (\r\n      <div className = \"right-view\">\r\n        <div className=\"heading-bar\">\r\n          <p className=\"page-heading\">Practical Assignment - 1</p>\r\n        </div>\r\n        <div>\r\n          <ul className=\"text-input-box\">\r\n\r\n            <li className=\"input-item\">\r\n              <div >\r\n                <p className=\"input-box-heading\">Block Size</p>\r\n                <div >\r\n                  <select className=\"select-css\" value={this.state.selectValue} onChange={this.handleBlockSize}>\r\n                   <option value=\"16\">16 Bits</option>\r\n                    <option value=\"32\">32 Bits</option>\r\n                    <option value=\"64\">64 Bits</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            </li>\r\n\r\n            <li className=\"input-item\">\r\n              <div >\r\n                <p className=\"input-box-heading\">Rounds</p>\r\n                <div >\r\n                  <select className=\"select-css\" value={this.state.selectValue} onChange={this.handleRound}>\r\n                  {roundlist.map(r => (\r\n                    <option value={r}>{r}</option>\r\n                  ))}\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            </li>\r\n\r\n            <li className=\"input-item\">\r\n              <div >\r\n                <p className=\"input-box-heading\">Key</p>\r\n                <input className=\"input-box\" value = {this.state.key} type = \"text\" placeholder = \"Key\" onChange={this.handleKey}/>\r\n              </div>\r\n            </li>\r\n\r\n            <li className=\"input-item\">\r\n              <div >\r\n                <p className=\"input-box-heading\">Seed</p>\r\n                <input className=\"input-box\" value = {this.state.seed} type = \"number\" placeholder = \"Seed\" onChange={this.handleSeed}/>\r\n              </div>\r\n            </li>\r\n\r\n            <li className=\"input-item\">\r\n              <div className=\"control-button\">\r\n                <p className=\"input-box-heading\">{this.state.m1} - {this.state.m2}</p>\r\n                <svg onClick={this.changeMode} id=\"Layer_1\" enable-background=\"new 0 0 512 512\" height=\"512\" viewBox=\"0 0 512 512\" width=\"512\" xmlns=\"http://www.w3.org/2000/svg\"><g><path d=\"m92.69 216c6.23 6.24 16.39 6.24 22.62 0l20.69-20.69c6.24-6.23 6.24-16.39 0-22.62l-20.69-20.69h284.69c26.47 0 48 21.53 48 48 0 13.23 10.77 24 24 24h16c13.23 0 24-10.77 24-24 0-61.76-50.24-112-112-112h-284.69l20.69-20.69c6.24-6.23 6.24-16.39 0-22.62l-20.69-20.69c-6.23-6.24-16.39-6.24-22.62 0l-90.35 90.34c-3.12 3.13-3.12 8.19 0 11.32z\"/><path d=\"m419.31 296c-6.23-6.24-16.38-6.24-22.62 0l-20.69 20.69c-6.252 6.252-6.262 16.358 0 22.62l20.69 20.69h-284.69c-26.47 0-48-21.53-48-48 0-13.23-10.77-24-24-24h-16c-13.23 0-24 10.77-24 24 0 61.76 50.24 112 112 112h284.69l-20.69 20.69c-6.252 6.252-6.262 16.358 0 22.62l20.69 20.69c6.241 6.241 16.38 6.24 22.62 0l90.35-90.34c3.12-3.13 3.12-8.19 0-11.32z\"/></g></svg>\r\n              </div>\r\n            </li>\r\n            <li className=\"input-item\">\r\n              <div className=\"control-button\">\r\n                <p className=\"input-box-heading text-button\">Padding</p>\r\n                <input className=\"input-button example_b\" id=\"clickMe\"\r\n                  type=\"button\" value={this.state.padding ? \"Enabled\" : \"Disabled\"} onClick={this.handlePadding} />\r\n              </div>\r\n            </li>\r\n          </ul>\r\n          <ul className=\"text-input-box\">\r\n\r\n            <li className=\"input-item\">\r\n              <div>\r\n                <ul className=\"input-type\">\r\n                  <li className=\"input-type-item\">\r\n                    <p className=\"input-box-heading\">{this.state.m1} Text</p>\r\n                  </li>\r\n                  <li className=\"input-type-item\">\r\n                  { this.state.mode ?\r\n                    (<div >\r\n                      <select className=\"select-css\" value={this.state.plainTextType} onChange={this.handlePlainTextType}>\r\n                       <option value=\"ASCII\">ASCII</option>\r\n                        <option value=\"HEX\">HEX</option>\r\n                      </select>\r\n                    </div>)\r\n                    :\r\n                    (<div >\r\n                      <select className=\"select-css\" value={this.state.cipherTextType} onChange={this.handleCipherTextType}>\r\n                       <option value=\"ASCII\">ASCII</option>\r\n                        <option value=\"HEX\">HEX</option>\r\n                      </select>\r\n                    </div>)\r\n                  }\r\n                  </li>\r\n                </ul>\r\n                { this.state.mode ?\r\n                (<textarea className = \"inputBox\" value = {this.state.plainText} type = \"text\" placeholder = \"Plain Text\" onChange={this.handleChange}/>)\r\n                :\r\n                (<textarea className = \"inputBox\" value = {this.state.cipher} type = \"text\" placeholder = \"Cipher Text\" onChange={this.handleChange}/>)\r\n              }\r\n              </div>\r\n            </li>\r\n            <li className=\"input-item\">\r\n              <div style={{display:'inline-block'}}>\r\n                <ul className=\"input-type\">\r\n                  <li className=\"input-type-item\">\r\n                    <p className=\"input-box-heading\">{this.state.m2} Text</p>\r\n                  </li>\r\n                  <li className=\"input-type-item\">\r\n                  { !this.state.mode ?\r\n                    (<div >\r\n                      <select className=\"select-css\" value={this.state.plainTextType} onChange={this.handlePlainTextType}>\r\n                       <option value=\"ASCII\">ASCII</option>\r\n                        <option value=\"HEX\">HEX</option>\r\n                      </select>\r\n                    </div>)\r\n                    :\r\n                    (<div >\r\n                      <select className=\"select-css\" value={this.state.cipherTextType} onChange={this.handleCipherTextType}>\r\n                       <option value=\"ASCII\">ASCII</option>\r\n                        <option value=\"HEX\">HEX</option>\r\n                      </select>\r\n                    </div>)\r\n                  }\r\n                  </li>\r\n                </ul>\r\n                { this.state.mode ?\r\n                  (<textarea className = \"inputBox\" value = {this.state.cipher} type = \"text\" placeholder = \"Cipher Text\" readonly />)\r\n                  :\r\n                  (<textarea className = \"inputBox\" value = {this.state.plainText} type = \"text\" placeholder = \"Plain Text\" readonly/>)\r\n                }\r\n              </div>\r\n            </li>\r\n            <li className=\"input-item\">\r\n            <div>\r\n              <input className=\"input-button example_b slight-left\" id=\"clickMe\" type=\"button\" value=\"Avalanche Effect\" onClick={this.handleGraph} />\r\n              <GraphAppAvalanche  data = {{gdata : this.state.graphdata,height : 600, width : window.innerWidth < 1000 ? 600 : 900}}/>\r\n            </div>\r\n            </li>\r\n          </ul>\r\n\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Pa1\r\n","E:\\Project\\networksecurity\\cypherit\\src\\components\\GraphAppAvalanche.js",["90"],"E:\\Project\\networksecurity\\cypherit\\src\\components\\Home.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":13},{"ruleId":"95","severity":1,"message":"99","line":7,"column":7,"nodeType":"97","messageId":"98","endLine":7,"endColumn":10},{"ruleId":"100","severity":2,"message":"101","line":105,"column":16,"nodeType":"97","messageId":"102","endLine":105,"endColumn":28},{"ruleId":"91","replacedBy":"103"},{"ruleId":"93","replacedBy":"104"},{"ruleId":"95","severity":1,"message":"105","line":1,"column":8,"nodeType":"97","messageId":"98","endLine":1,"endColumn":13},{"ruleId":"106","severity":1,"message":"107","line":6,"column":12,"nodeType":"108","messageId":"109","endLine":6,"endColumn":14},{"ruleId":"110","severity":1,"message":"111","line":22,"column":75,"nodeType":"112","endLine":22,"endColumn":111},{"ruleId":"110","severity":1,"message":"111","line":50,"column":79,"nodeType":"112","endLine":50,"endColumn":115},{"ruleId":"110","severity":1,"message":"111","line":66,"column":81,"nodeType":"112","endLine":66,"endColumn":117},{"ruleId":"95","severity":1,"message":"113","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":30},{"ruleId":"114","severity":1,"message":"115","line":103,"column":9,"nodeType":"116","endLine":103,"endColumn":37},{"ruleId":"95","severity":1,"message":"117","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":14},{"ruleId":"114","severity":1,"message":"115","line":245,"column":10,"nodeType":"116","endLine":245,"endColumn":38},{"ruleId":"106","severity":1,"message":"118","line":41,"column":30,"nodeType":"108","messageId":"109","endLine":41,"endColumn":32},{"ruleId":"106","severity":1,"message":"118","line":41,"column":60,"nodeType":"108","messageId":"109","endLine":41,"endColumn":62},{"ruleId":"106","severity":1,"message":"118","line":41,"column":89,"nodeType":"108","messageId":"109","endLine":41,"endColumn":91},{"ruleId":"106","severity":1,"message":"107","line":54,"column":25,"nodeType":"108","messageId":"109","endLine":54,"endColumn":27},{"ruleId":"106","severity":1,"message":"107","line":69,"column":35,"nodeType":"108","messageId":"109","endLine":69,"endColumn":37},{"ruleId":"106","severity":1,"message":"107","line":69,"column":58,"nodeType":"108","messageId":"109","endLine":69,"endColumn":60},{"ruleId":"106","severity":1,"message":"107","line":76,"column":32,"nodeType":"108","messageId":"109","endLine":76,"endColumn":34},{"ruleId":"106","severity":1,"message":"107","line":76,"column":55,"nodeType":"108","messageId":"109","endLine":76,"endColumn":57},{"ruleId":"106","severity":1,"message":"107","line":84,"column":23,"nodeType":"108","messageId":"109","endLine":84,"endColumn":25},{"ruleId":"106","severity":1,"message":"118","line":84,"column":62,"nodeType":"108","messageId":"109","endLine":84,"endColumn":64},{"ruleId":"106","severity":1,"message":"107","line":84,"column":87,"nodeType":"108","messageId":"109","endLine":84,"endColumn":89},{"ruleId":"106","severity":1,"message":"107","line":99,"column":24,"nodeType":"108","messageId":"109","endLine":99,"endColumn":26},{"ruleId":"106","severity":1,"message":"107","line":115,"column":26,"nodeType":"108","messageId":"109","endLine":115,"endColumn":28},{"ruleId":"106","severity":1,"message":"107","line":116,"column":26,"nodeType":"108","messageId":"109","endLine":116,"endColumn":28},{"ruleId":"106","severity":1,"message":"107","line":200,"column":24,"nodeType":"108","messageId":"109","endLine":200,"endColumn":26},{"ruleId":"106","severity":1,"message":"107","line":205,"column":36,"nodeType":"108","messageId":"109","endLine":205,"endColumn":38},{"ruleId":"95","severity":1,"message":"113","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":30},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'Graph' is defined but never used.","Identifier","unusedVar","'PA0' is defined but never used.","no-undef","'CaesarCypher' is not defined.","undef",["119"],["120"],"'react' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'PureComponent' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Base64' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]